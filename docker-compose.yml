version: "3"

services:
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_PASSWORD}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      #      - ./indexers/db/data/postgres:/var/lib/postgresql/data
      - ./indexers/db/docker-entrypoint-initdb.d/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  hasura-engine:
    container_name: explorer-graphql
    image: hasura/graphql-engine:v2.40.0
    depends_on:
      - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}
      # Gemini 3H
      HASURA_GRAPHQL_GEMINI_3H_CONSENSUS_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_GEMINI_3H_CONSENSUS}
      HASURA_GRAPHQL_GEMINI_3H_LEADERBOARD_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_GEMINI_3H_LEADERBOARD}
      HASURA_GRAPHQL_GEMINI_3H_STAKING_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_GEMINI_3H_STAKING}
      # Gemini 3G
      HASURA_GRAPHQL_GEMINI_3G_TESTNET_REWARDS_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_GEMINI_3G_TESTNET_REWARDS}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: user
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
    ports:
      - "8080:8080"
    command:
      - graphql-engine
      - serve

  # accounts-subquery-node:
  #   image: subquerynetwork/subql-node-substrate:latest
  #   depends_on:
  #     "postgres":
  #       condition: service_healthy
  #   restart: unless-stopped
  #   environment:
  #     DB_USER: postgres
  #     DB_PASS: postgres
  #     DB_DATABASE: accounts
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #   volumes:
  #     - ./indexers/accounts:/accounts
  #   command:
  #     - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
  #     - -f=/accounts
  #     - --db-schema=accounts
  #     - --workers=4
  #     - --batch-size=30
  #     - --unfinalized-blocks=true
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://accounts-subquery-node:3000/ready"]
  #     interval: 3s
  #     timeout: 5s
  #     retries: 10

  consensus-subquery-node:
    image: subquerynetwork/subql-node-substrate:latest
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: gemini-3h-consensus
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/consensus:/gemini-3h/consensus
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/consensus
      - --db-schema=gemini-3h-consensus
      - --workers=4
      - --batch-size=30
      - --unfinalized-blocks=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consensus-subquery-node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 10

  leaderboard-subquery-node:
    image: subquerynetwork/subql-node-substrate:latest
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: gemini-3h-leaderboard
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/leaderboard:/gemini-3h/leaderboard
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/leaderboard
      - --db-schema=gemini-3h-leaderboard
      - --workers=4
      - --batch-size=30
      - --unfinalized-blocks=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://leaderboard-subquery-node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 10

  staking-subquery-node:
    image: subquerynetwork/subql-node-substrate:latest
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: gemini-3h-staking
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/staking:/gemini-3h/staking
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/staking
      - --db-schema=gemini-3h-staking
      - --workers=4
      - --batch-size=30
      - --unfinalized-blocks=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://staking-subquery-node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 10

  # accounts-subquery-node:
  #   image: subquerynetwork/subql-node-substrate:latest
  #   depends_on:
  #     "postgres":
  #       condition: service_healthy
  #   restart: unless-stopped
  #   environment:
  #     DB_USER: postgres
  #     DB_PASS: postgres
  #     DB_DATABASE: accounts
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #   volumes:
  #     - ./indexers/accounts:/accounts
  #   command:
  #     - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
  #     - -f=/accounts
  #     - --db-schema=accounts
  #     - --workers=4
  #     - --batch-size=30
  #     - --unfinalized-blocks=true
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://accounts-subquery-node:3000/ready"]
  #     interval: 3s
  #     timeout: 5s
  #     retries: 10

  # graphql-engine:
  #   image: subquerynetwork/subql-query:latest
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     "consensus-subquery-node":
  #       condition: service_healthy
  #     "staking-subquery-node":
  #       condition: service_healthy
  #     "accounts-subquery-node":
  #       condition: service_healthy
  #   restart: always
  #   environment:
  #     DB_USER: postgres
  #     DB_PASS: postgres
  #     DB_DATABASE: ${DB_DATABASE}
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #   command:
  #     - --name=app
  #     - --playground
  #     - --indexer=http://consensus-subquery-node:3000
  #     - --indexer=http://staking-subquery-node:3000
  #     - --indexer=http://accounts-subquery-node:3000
