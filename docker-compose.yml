version: "3.9"

volumes:
  node-data: {}
  postgres_db: {}
  redis_db: {}

services:
  # Caddy Reverse Proxy with CORS enabled
  caddy:
#    profiles: [taurus]
    ulimits:
      nofile:
        soft: 65536 # Soft limit for open files (WebSocket connections count)
        hard: 65536 # Hard limit for open files
    image: caddy:latest
    ports:
      - "8000:80" # Map port 8080 on the host to port 80 in Caddy
    volumes:
      - ./indexers/Caddyfile:/etc/caddy/Caddyfile # Mount the Caddyfile
    depends_on:
      - node
    restart: unless-stopped

  # Subspace Node
  node:
#    profiles: [taurus]
    image: ghcr.io/autonomys/node:taurus-candidate
    platform: linux/amd64
    volumes:
      - node-data:/var/subspace:rw
    ports:
      - "30333:30333/tcp"
      - "30433:30433/tcp"
    restart: unless-stopped
    command:
      [
        "run",
        "--chain",
        "taurus",
        "--base-path",
        "/var/subspace",
        "--listen-on",
        "/ip4/0.0.0.0/tcp/30333",
        "--dsn-listen-on",
        "/ip4/0.0.0.0/tcp/30433",
        "--rpc-cors",
        "all",
        "--rpc-methods",
        "unsafe",
        "--rpc-listen-on",
        "0.0.0.0:9944",
        "--rpc-max-subscriptions-per-connection",
        "1000",
        "--rpc-max-connections",
        "20000",
        "--farmer",
        "--name",
        "astral",
      ]
    healthcheck:
      timeout: 5s
      interval: 30s
      retries: 60

  # Postgres Database
  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - ./indexers/db/docker-entrypoint-initdb.d/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    hostname: postgres
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 500
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0
    depends_on:
      - "postgres"
    volumes:
      - ./indexers/db/migrations:/hasura-migrations
      - ./indexers/db/metadata:/hasura-metadata
    restart: unless-stopped
    environment:
      # Essential Environment Variables
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_DATABASE}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_DATABASE} # Main database connection
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET} # Admin access secret
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET} # JWT authentication secret

      # Console and Development Mode
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE} # Disable console in production
      HASURA_GRAPHQL_DEV_MODE: "true" # Disable development mode features

      # Role and CORS Settings
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: user # Default role for unauthenticated users
      HASURA_GRAPHQL_CORS_DOMAIN: ${HASURA_GRAPHQL_CORS_DOMAIN} # Allowed domains for CORS
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"

      # Performance and Connection Settings
      HASURA_GRAPHQL_MAX_CONNECTIONS: 100 # Maximum number of database connections
      HASURA_GRAPHQL_STRIPES: 2 # Number of connection pool stripes
      HASURA_GRAPHQL_CONNECTIONS_PER_STRIPE: 50 # Connections per stripe
      HASURA_GRAPHQL_IDLE_TIMEOUT: 180 # Idle connection timeout in seconds
      HASURA_GRAPHQL_TIMEOUT: 60 # Request timeout in seconds

      # Logging Settings
      HASURA_GRAPHQL_LOG_LEVEL: "warn" # Log verbosity level
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup,http-log,webhook-log,websocket-log,query-log" # Enabled log types

      # Security and Authorization
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: "false" # Disable query allowlisting

      # Taurus Database
      HASURA_GRAPHQL_TAURUS_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_TAURUS}
      # Gemini 3H Databases
      HASURA_GRAPHQL_GEMINI_3H_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_GEMINI_3H}
      # Gemini 3G Database
      HASURA_GRAPHQL_GEMINI_3G_TESTNET_REWARDS_DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_GEMINI_3G_TESTNET_REWARDS}

      # Hasura Migrations and Metadata
      HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura-migrations
      HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
    ports:
      - "${HASURA_GRAPHQL_PORT}:8080"
    command:
      - graphql-engine
      - serve

  # Taurus Dictionary
  taurus_dictionary_subquery_node:
    profiles: [dictionary, taurus, taurus_dictionary]
    build:
      context: ./indexers/dictionary/autonomys-taurus
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_TAURUS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/dictionary/autonomys-taurus:/dictionary
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://taurus_dictionary_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10
    command:
      - -f=/dictionary
      - --disable-historical=true

  taurus_dictionary_graphql_engine:
    profiles: [dictionary, taurus, taurus_dictionary]
    image: onfinality/subql-query:latest
    ports:
      - "${TAURUS_DICTIONARY_SUBQUERY_NODE_PORT}:3000"
    depends_on:
      - "postgres"
      - "taurus_dictionary_subquery_node"
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_TAURUS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    command:
      - --name=dictionary
      - --playground

  # Gemini 3H Dictionary
  gemini_3h_dictionary_subquery_node:
    profiles: [gemini_3h, gemini_3h_dictionary] # dictionary,
    build:
      context: ./indexers/dictionary/autonomys-gemini-3h
    depends_on:
      "node":
        condition: service_healthy
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3H}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/dictionary/autonomys-gemini-3h:/dictionary
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3h_dictionary_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10
    command:
      - -f=/dictionary
      - --disable-historical=true

  gemini_3h_dictionary_graphql_engine:
    profiles: [gemini_3h, gemini_3h_dictionary] # dictionary,
    image: onfinality/subql-query:latest
    ports:
      - "${GEMINI_3H_DICTIONARY_SUBQUERY_NODE_PORT}:3000"
    depends_on:
      - "postgres"
      - "gemini_3h_dictionary_subquery_node"
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3H}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    command:
      - --name=dictionary
      - --playground

  # Taurus Subquery Nodes
  taurus_consensus_subquery_node:
    profiles: [taurus, taurus_consensus]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3001:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "taurus_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${TAURUS_RPC}
      CHAIN_ID: ${TAURUS_CHAIN_ID}
      DICTIONARY: http://taurus_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_TAURUS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/taurus/consensus:/taurus/consensus
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/taurus/consensus
      - --db-schema=consensus
      - --workers=4
      - --unsafe
      - --batch-size=250
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://taurus_consensus_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  taurus_leaderboard_subquery_node:
    profiles: [taurus, taurus_leaderboard]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3002:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "taurus_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${TAURUS_RPC}
      CHAIN_ID: ${TAURUS_CHAIN_ID}
      DICTIONARY: http://taurus_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_TAURUS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/taurus/leaderboard:/taurus/leaderboard
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/taurus/leaderboard
      - --db-schema=leaderboard
      - --workers=1
      - --unsafe
      - --batch-size=15
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3h_leaderboard_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  taurus_staking_subquery_node:
    profiles: [taurus, taurus_staking]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3003:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "taurus_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${GEMINI_3H_RPC}
      CHAIN_ID: ${TAURUS_CHAIN_ID}
      DICTIONARY: http://taurus_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_TAURUS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/taurus/staking:/taurus/staking
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/taurus/staking
      - --db-schema=staking
      - --workers=1
      - --unsafe
      - --batch-size=15
      - --disable-historical=true
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://taurus_staking_subquery_node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 10

  # Gemini 3H Subquery Nodes
  gemini_3h_consensus_subquery_node:
    profiles: [gemini_3h, gemini_3h_consensus]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3001:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "gemini_3h_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${GEMINI_3H_RPC}
      CHAIN_ID: ${GEMINI_3H_CHAIN_ID}
      DICTIONARY: http://gemini_3h_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3H}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/consensus:/gemini-3h/consensus
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/consensus
      - --db-schema=consensus
      - --workers=4
      - --unsafe
      - --batch-size=250
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3h_consensus_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  gemini_3h_leaderboard_subquery_node:
    profiles: [gemini_3h, gemini_3h_leaderboard]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3002:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "gemini_3h_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${GEMINI_3H_RPC}
      CHAIN_ID: ${GEMINI_3H_CHAIN_ID}
      DICTIONARY: http://gemini_3h_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3H}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/leaderboard:/gemini-3h/leaderboard
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/leaderboard
      - --db-schema=leaderboard
      - --workers=1
      - --unsafe
      - --batch-size=15
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3h_leaderboard_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  gemini_3h_staking_subquery_node:
    profiles: [gemini_3h, gemini_3h_staking]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3003:3000"
    depends_on:
      "postgres":
        condition: service_healthy
      "gemini_3h_dictionary_subquery_node":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${GEMINI_3H_RPC}
      CHAIN_ID: ${GEMINI_3H_CHAIN_ID}
      DICTIONARY: http://gemini_3h_dictionary_subquery_node:3000
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3H}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3h/staking:/gemini-3h/staking
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3h/staking
      - --db-schema=staking
      - --workers=1
      - --unsafe
      - --batch-size=15
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3h_staking_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  gemini_3g_testnet_rewards_subquery_node:
    profiles: [gemini_3g, gemini_3g_testnet_rewards]
    image: subquerynetwork/subql-node-substrate:latest
    ports:
      - "3004:3000"
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      ENDPOINT: ${GEMINI_3G_RPC}
      CHAIN_ID: ${GEMINI_3G_CHAIN_ID}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_DATABASE: ${DB_GEMINI_3G_TESTNET_REWARDS}
      DB_HOST: ${DB_HOST}
      DB_PORT: 5432
    volumes:
      - ./indexers/gemini-3g/testnet-rewards:/gemini-3g/testnet-rewards
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/gemini-3g/testnet-rewards
      - --db-schema=${DB_GEMINI_3G_TESTNET_REWARDS}
      - --workers=1
      - --unsafe
      - --batch-size=15
      - --disable-historical=true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://gemini_3g_testnet_rewards_subquery_node:3000/ready",
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  # Redis
  redis:
    profiles: [task]
    image: redis:latest
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_db:/data
    hostname: redis
    command: ["redis-server", "--bind", "0.0.0.0", "--port", "6379"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli -h localhost -p 6379 ping | grep PONG || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  # Express + BullMQ
  taskboard:
    profiles: [task]
    build:
      context: ./indexers/taskboard
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./indexers/taskboard:/app
    hostname: taskboard
    restart: unless-stopped
    ports:
      - "${BULL_PORT}:3000"
    environment:
      BULL_USERNAME: ${BULL_USERNAME}
      BULL_PASSWORD: ${BULL_PASSWORD}
      BULL_PORT: ${BULL_PORT}

      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}

      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}

      DB_GEMINI_3H: ${DB_GEMINI_3H}
