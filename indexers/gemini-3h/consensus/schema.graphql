type Account @entity {
  id: ID!
  free: BigInt
  reserved: BigInt
  total: BigInt @index
  updatedAt: BigInt
  nonce: BigInt
}

type Block @entity {
  id: ID!
  height: BigInt! @index
  timestamp: Date! @index
  hash: String! @index
  parentHash: String!
  specId: String!
  stateRoot: String!
  extrinsicsRoot: String!
  spacePledged: BigInt!
  blockchainSize: BigInt!
  extrinsicsCount: Int!
  eventsCount: Int!
  author: Account @index
}

type ExtrinsicModuleName @entity {
  id: ID!
  name: String! @index
}

type Extrinsic @entity {
  id: ID!
  hash: String! @index
  indexInBlock: Int!
  nonce: BigInt
  name: String! @index
  signer: Account @index
  signature: String @index
  error: String
  tip: BigInt
  fee: BigInt
  success: Boolean!
  block: Block!
  pos: Int
  timestamp: Date! @index
  args: String
}

type EventModuleName @entity {
  id: ID!
  name: String! @index
}

type Event @entity {
  id: ID!
  indexInBlock: Int!
  name: String! @index
  timestamp: Date! @index
  phase: String!
  pos: Int
  args: String
  block: Block
  extrinsic: Extrinsic
  call: Call
}

type RewardEvent @entity {
  id: ID!
  indexInBlock: Int!
  name: String! @index
  timestamp: Date! @index
  phase: String!
  pos: Int
  block: Block
  extrinsic: Extrinsic
  call: Call
  account: Account @index
  amount: BigInt
}

type Call @entity {
  id: ID!
  name: String! @index
  timestamp: Date! @index
  success: Boolean!
  args: String
  block: Block!
  extrinsic: Extrinsic!
  error: String
  signer: String @index
  parent: Call
  pos: Int
}

type Log @entity {
  id: ID!
  kind: String! @index
  value: String
  block: Block!
}
