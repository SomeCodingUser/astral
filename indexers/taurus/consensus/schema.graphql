# Core Consensus Entities

type Block @entity {
  id: ID!
  sortId: String! @index
  height: BigInt! @index
  hash: String! @index
  timestamp: Date! @index
  parentHash: String!
  specId: String!
  stateRoot: String!
  extrinsicsRoot: String!
  spacePledged: BigInt!
  blockchainSize: BigInt!
  extrinsicsCount: Int!
  eventsCount: Int!
  authorId: String! @index
}

type Log @entity {
  id: ID!
  sortId: String! @index
  blockHeight: BigInt! @index
  blockHash: String! @index
  indexInBlock: Int! @index
  logKindId: String! @index
  kind: String!
  value: String
  timestamp: Date! @index
}

type Extrinsic @entity {
  id: ID!
  sortId: String! @index
  hash: String! @index
  blockHeight: BigInt! @index
  blockHash: String! @index
  extrinsicModuleId: String! @index
  name: String!
  indexInBlock: Int!
  success: Boolean! @index
  timestamp: Date! @index
  nonce: BigInt!
  signer: String! @index
  signature: String! @index
  args: String!
  error: String!
  tip: BigInt!
  fee: BigInt!
  pos: Int!
}

type Event @entity {
  id: ID!
  sortId: String! @index
  blockHeight: BigInt! @index
  blockHash: String! @index
  extrinsicId: String! @index
  extrinsicHash: String! @index
  eventModuleId: String! @index
  name: String!
  indexInBlock: BigInt!
  timestamp: Date! @index
  phase: String!
  pos: Int!
  args: String!
}

type Section @entity {
  id: ID!
  sectionId: String! @index
  section: String! @index
}

type ExtrinsicModule @entity {
  id: ID!
  moduleId: String! @index
  sectionId: String! @index
  section: String! @index
  method: String! @index
}

type EventModule @entity {
  id: ID!
  moduleId: String! @index
  sectionId: String! @index
  section: String! @index
  method: String! @index
}

type LogKind @entity {
  id: ID!
  kindId: String! @index
  kind: String! @index
}

# Accounts Entities

type AccountHistory @entity {
  id: ID!
  accountId: String! @index
  nonce: BigInt!
  free: BigInt!
  reserved: BigInt!
  total: BigInt @index
  createdAt: BigInt! @index
  updatedAt: BigInt! @index
}

type Account @entity {
  id: ID!
  accountId: String! @index
  nonce: BigInt!
  free: BigInt!
  reserved: BigInt!
  total: BigInt @index
  createdAt: BigInt! @index
  updatedAt: BigInt! @index
}

type AccountProfile @entity {
  id: ID!
  accountId: String! @index
  name: String! @index
  description: String!
  icon: String!
  banner: String!
  website: String!
  websiteVerified: Boolean!
  email: String!
  emailVerified: Boolean!
  discord: String!
  github: String!
  twitter: String!
  proofMessage: String!
  proofSignature: String!
  createdAt: BigInt! @index
  updatedAt: BigInt! @index
}

type Transfer @entity {
  id: ID!
  extrinsicId: String! @index
  eventId: String! @index
  from: String! @index
  to: String! @index
  value: BigInt!
  fee: BigInt!
  success: Boolean!
  timestamp: BigInt! @index
  date: Date! @index
  createdAt: BigInt! @index
}

type AccountRewards @entity {
  id: ID!
  accountId: String! @index
  # Sum of all rewards
  totalRewardsValue: BigInt
  totalRewardsCounts: BigInt
  # Rewards for block authoring
  blockRewardsValue: BigInt
  blockRewardsCounts: BigInt
  # Rewards for block voting
  voteRewardsValue: BigInt
  voteRewardsCounts: BigInt
  # Estimated Rewards for staking (portioned Operator rewards (estimation since the true calculation is only available at withdrawal))
  estimatedStakingRewardsValue: BigInt
  estimatedStakingRewardsCounts: BigInt
  createdAt: BigInt! @index
  updatedAt: BigInt!
}

type Reward @entity {
  id: ID!
  blockHeight: BigInt! @index
  blockHash: String! @index
  accountId: String! @index
  indexInBlock: BigInt!
  rewardType: String! @index
  amount: BigInt!
  timestamp: Date! @index
}
