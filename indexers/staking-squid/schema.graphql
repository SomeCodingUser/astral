type Domain @entity {
  id: ID! @index
  domainId: Int! @index
  completedEpoch: Int! @index
  createdAt: Int @index
  updatedAt: Int @index
}

enum OperatorStatus {
  PENDING
  REGISTERED
  DEREGISTERED
  SLASHED
}

type Operator @entity {
  id: ID! @index
  domainId: Int! @index
  operatorId: Int! @index
  signingKey: String! @index
  owner: String! @index
  minimumNominatorStake: BigInt!
  nominationTax: Int!
  currentTotalStake: BigInt!
  currentStorageFeeDeposit: BigInt!
  currentEpochRewards: BigInt!
  currentTotalShares: BigInt!
  totalDeposits: BigInt!
  totalTaxCollected: BigInt!
  deposits: [Deposit!]!
    @derivedFrom(field: "operator")
    @cardinality(value: 1000000000)
  nominators: [Nominator!]!
    @derivedFrom(field: "operator")
    @cardinality(value: 1000000000)
  withdrawals: [Withdrawal!]!
    @derivedFrom(field: "operator")
    @cardinality(value: 1000000000)
  operatorRewards: [OperatorRewardEvent!]!
    @derivedFrom(field: "operator")
    @cardinality(value: 1000000000)
  operatorFees: [OperatorFeesEarned!]!
    @derivedFrom(field: "operator")
    @cardinality(value: 1000000000)
  rawStatus: String
  status: OperatorStatus! @index
  nominatorsCount: Int!
  depositsCount: Int!
  withdrawalsCount: Int!
  bundleCount: Int!
  lastBundleAt: Int!
  createdAt: Int @index
  updatedAt: Int @index
}

enum NominatorStatus {
  PENDING
  STAKING
  DEREGISTERED
  SLASHED
}

type Nominator @entity {
  id: ID! @index
  account: String! @index
  operator: Operator!
  shares: BigInt!
  deposits: [Deposit!]!
    @derivedFrom(field: "nominator")
    @cardinality(value: 1000000000)
  withdrawals: [Withdrawal!]!
    @derivedFrom(field: "nominator")
    @cardinality(value: 1000000000)
  status: NominatorStatus! @index
  createdAt: Int @index
  updatedAt: Int @index
}

enum DepositStatus {
  PENDING
  DEPOSITED
}

type Deposit @entity {
  id: ID! @index
  blockNumber: Int! @index
  account: String! @index
  amount: BigInt!
  storageFeeDeposit: BigInt!
  operator: Operator!
  nominator: Nominator!
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  status: DepositStatus! @index
}

enum WithdrawalStatus {
  PENDING
  READY
  WITHDRAW
}

type Withdrawal @entity {
  id: ID! @index
  blockNumber: Int! @index
  account: String! @index
  shares: BigInt!
  operator: Operator!
  nominator: Nominator!
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  status: WithdrawalStatus! @index
}

type OperatorUnlockedFunds @entity {
  id: ID! @index
  blockNumber: Int! @index
  operator: Operator!
  nominator: Nominator!
  nominatorAccount: String!
  timestamp: DateTime! @index
  extrinsicHash: String! @index
  amount: BigInt!
}

type OperatorRewardEvent @entity {
  id: ID! @index
  operator: Operator!
  timestamp: DateTime! @index
  blockNumber: Int! @index
  extrinsicHash: String! @index
  amount: BigInt!
}

type OperatorFeesEarned @entity {
  id: ID! @index
  operator: Operator!
  amount: BigInt!
  updatedAt: Int!
}

type Stats @entity {
  id: ID! @index
  blockNumber: Int! @index
  totalDomains: Int!
  totalOperators: Int!
  totalNominators: Int!
  totalActiveOperators: Int!
  totalSlashedOperators: Int!
  totalStaked: BigInt!
  totalFees: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  allTimeHighStaked: BigInt!
  timestamp: DateTime! @index
}

type StatsPerDomain @entity {
  id: ID! @index
  domainId: Int! @index
  blockNumber: Int! @index
  totalOperators: Int!
  totalNominators: Int!
  totalActiveOperators: Int!
  totalSlashedOperators: Int!
  totalStaked: BigInt!
  totalFees: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  allTimeHighStaked: BigInt!
  timestamp: DateTime! @index
}

type StatsPerOperator @entity {
  id: ID! @index
  domainId: Int! @index
  operatorId: Int! @index
  blockNumber: Int! @index
  totalNominators: Int!
  totalStaked: BigInt!
  totalFees: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  allTimeHighStaked: BigInt!
  timestamp: DateTime! @index
}
